
        // The version to use 
        #version 450
        #extension GL_EXT_debug_printf : enable
        //#extension  VK_KHR_portability_subset : enable

        // The buffers are provided via the tensors
        layout(binding = 0) buffer bufA { float image[]; };
        layout(binding = 1) buffer bufB { float kernel[]; };
        layout(binding = 2) buffer bufOut { float result[]; };
        layout(binding = 3) buffer bufSizes { int sizes[]; };

        // The execution structure
        layout (local_size_x = 1, local_size_y = 1) in;


        void main() {
            //GL_EXT_debug_printf("here");
            //debugPrintfEXT("Here");
            // calculate row and column positions
            
            int idx = int(gl_GlobalInvocationID.x);
            // int col = int(gl_GlobalInvocationID.y);

            int row = idx % sizes[1];
            int col = idx / sizes[1];
            
            int row_size = int(sizes[0]); 
            int col_size = int(sizes[1]);
            int kernel_size = int(sizes[2]);

            if(row >= row_size || col >= col_size) return;

            int kernel_offset = int(floor(kernel_size / 2.0));

            // check bounds
            if(row >= row_size || col >= col_size) return;

            int iFlip;
            int jFlip; // flipped kernel indices
            int ii;
            int jj;
            float temp = 0;

            for(int i = 0; i < kernel_size; i++){

                iFlip = kernel_size - 1 - i;

                for(int j = 0; j < kernel_size; j++){

                    jFlip = kernel_size - 1 - j;

                    //ii = row + (kernel_offset - iFlip);
                    //jj = col + (kernel_offset - jFlip);

                    if(row + (kernel_offset - iFlip) >= 0 && row + (kernel_offset - iFlip) < row_size && col + (kernel_offset - jFlip) >= 0 && col + (kernel_offset - jFlip) < col_size) {
                    //if (ii >= 0 && ii < row_size && jj >= 0 && jj < col_size) {
                        temp += image[row + (kernel_offset - iFlip) * col_size + col + (kernel_offset - jFlip)] * kernel[iFlip * kernel_size + jFlip];
                        //temp += image[i * col_size + j] * kernel[i * kernel_size + j];
                    }
                }
            }

            result[row * col_size + col] = temp;
        }

      